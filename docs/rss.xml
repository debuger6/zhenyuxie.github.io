<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>debuger</title><link>/</link><description>Recent content on debuger</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 19 Feb 2023 15:15:00 +0800</lastBuildDate><atom:link href="/rss.xml" rel="self" type="application/rss+xml"/><item><title>深入理解 Elasticsearch 分页技术</title><link>/post/2023-02-19-es-paginate/</link><pubDate>Sun, 19 Feb 2023 15:15:00 +0800</pubDate><guid>/post/2023-02-19-es-paginate/</guid><description>Elasticsearch 是一款分布式的搜索引擎，提供了灵活的分页技术。本文主要介绍 Elasticsearch（简称 ES） 的几种分页技术，并深入分析各种分页技术的优</description></item><item><title>关于我</title><link>/about.html</link><pubDate>Sat, 18 Feb 2023 22:00:00 +0800</pubDate><guid>/about.html</guid><description>“上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。” —《道德经》 本人 Coder 一枚，热爱技术，乐于分享、学习，主要专注于数</description></item><item><title>Merge Path - A Visually Intuitive Approach to Parallel Merging 论文解读</title><link>/post/2023-02-15-merge_path/</link><pubDate>Wed, 15 Feb 2023 22:00:00 +0800</pubDate><guid>/post/2023-02-15-merge_path/</guid><description>在看DuckDB技术博客时，了解到这篇论文。文章提出的算法非常实用，在工程实践中应用效果也很好。本文主要对论文核心部分进行解读，并会根据自己</description></item><item><title>lucene 编码技术 - DirectMonotonicWriter</title><link>/2022/12/13/lucene-dmw/</link><pubDate>Sun, 18 Dec 2022 17:13:00 +0000</pubDate><guid>/2022/12/13/lucene-dmw/</guid><description>从名称可以看出，DirectMonotonicWriter 这个类主要是针对单调递增或者递减（即有序）数据集的编码。本文将结合源码分析其编码原</description></item><item><title>lucene 编码技术 - DirectWriter</title><link>/2022/12/04/lucene-dw/</link><pubDate>Sun, 04 Dec 2022 10:56:00 +0000</pubDate><guid>/2022/12/04/lucene-dw/</guid><description>DirectWriter 这个类的主要作用是将 long[] 型数据集编码存储到 byte[] 中，其实现充分考虑压缩比和性能因素。 编码原理 DirectWriter 使用的是固定位编码方式，即数据集中的所有元数均按照</description></item><item><title>Pebble 源码剖析 - Skiplist</title><link>/2022/02/26/pebble-skiplist/</link><pubDate>Sat, 26 Feb 2022 23:27:00 +0000</pubDate><guid>/2022/02/26/pebble-skiplist/</guid><description>本章主要从源码角度来分析 Pebble 对 Skiplist（跳表）的高性能设计，对于跳表的介绍及原理可以参考 百科 或网上其他文章，本文不做冗余介绍。 数据结构</description></item><item><title>Pebble 源码剖析-写入流程(续)</title><link>/2022/01/24/pebble-write-s/</link><pubDate>Wed, 16 Feb 2022 23:26:00 +0000</pubDate><guid>/2022/01/24/pebble-write-s/</guid><description>上一章，分析了 Pebble 写入的整体流程，并深入分析了 Pipeline 的三个执行阶段。但还未对 large batch 和 makeRoomForWrite 具体执行逻辑进行分析，本章将对这两点内容展开讨论。 Large Batch 这里首先</description></item><item><title>Compaction 策略 - Leveled</title><link>/2022/01/30/compaction-leveled/</link><pubDate>Sun, 30 Jan 2022 22:58:00 +0000</pubDate><guid>/2022/01/30/compaction-leveled/</guid><description>在上一章，我们介绍了 Size-Tiered Compaction 策略（STCS），讨论了 STCS 的原理，并着重分析了它的缺陷 &amp;ndash; 空间放大。本章我们将会介绍另一种策略 &amp;ndash; Level Compaction Strategy (LCS)，该策</description></item><item><title>Compaction 策略 - Size-Tiered</title><link>/2022/01/27/compaction-size-tired/</link><pubDate>Thu, 27 Jan 2022 23:58:00 +0000</pubDate><guid>/2022/01/27/compaction-size-tired/</guid><description>开篇 本系列文章主要介绍 LSM-Tree 中非常重要的技术点 &amp;ndash; Compaction。理解 Compaction 的作用及工作机制，对基于 LSM-Tree 类型的数据库开发或者调优有极大的益处。本系</description></item><item><title>Pebble 源码剖析-写入流程</title><link>/2022/01/24/pebble-write/</link><pubDate>Mon, 24 Jan 2022 00:00:04 +0000</pubDate><guid>/2022/01/24/pebble-write/</guid><description>本章会结合 Pebble 源码来剖析整个写入流程，并会深入分析整个写入路径上涉及的一些技术细节。这里说明，文章只会贴一些关键代码和代码行数较少的函数或者方</description></item><item><title>初识Pebble</title><link>/2022/01/20/pebble-intr/</link><pubDate>Thu, 20 Jan 2022 22:00:00 +0000</pubDate><guid>/2022/01/20/pebble-intr/</guid><description>Pebble 来源 Pebble 是 Cockroach 参考 RocksDB 并用 Go 语言开发的高性能 KV 存储引擎。一直以来 CockroachDB 以 RocksDB 作为底层存储引擎，虽然 RocksDB 是一款非常优秀的 KV 内嵌式数据库，但是在 Cockroach 的使用过程</description></item><item><title>站点示例</title><link>/flinks.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/flinks.html</guid><description>如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下： - name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</description></item></channel></rss>